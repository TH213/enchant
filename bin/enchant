#!/usr/bin/env ruby
require 'enchant'
require 'logger'
require 'logger-colors'
require 'getoptlong'


$logger = Logger.new(STDOUT)
$logger.datetime_format = '%Y-%m-%d %H:%M:%S'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-V', GetoptLong::NO_ARGUMENT ],
  [ '--dirbuster', '-D', GetoptLong::NO_ARGUMENTÂ ],
  [ '--wordlist', '-w', GetoptLong::REQUIRED_ARGUMENT ]
)

trap("INT") { $logger.error 'INTERRUPTED'; Kernel.exit -99 }

options = { :verbose=>false, :wordlist=>nil, :host=>nil, :port=>80, :domain=>nil }

opts.each do |opt, arg|
  case opt
  when '--help'
    Enchant::Engine.help
    exit 0
  when '--verbose'
    options[:verbose]=true
  when '--version'
    puts "enchant #{Enchant.version}"
    exit 0
  when '--dirbuster'
    options[:wordlist] = :dirbuster
  when '--wordlist'
    options[:wordlist] = arg
  end
end

if ARGV.length != 1
  $logger.error "missing target"
  Enchant::Engine.help
  exit -1
end

url = ARGV.shift
options[:host]= url.split(':')[0] ||= "localhost"    # fallback here should never occur... however it's better to be paranoid
options[:port] = url.split(':')[1] ||= 80             # more common here


$logger.info "sending probes to #{options[:host]}@#{options[:port]}"

e = Enchant::Engine.new(options)
if ! e.up?
  $logger.error "#{options[:host]}@#{options[:port]} is down or unreachable"
  Kernel.exit -2
end


start=Time.now
count = e.scan
stop=Time.now

$logger.info "#{count} urls open found in #{stop-start} secs".color(:green)

e.urls_open.each do |u|
  $logger.info "#{u[:path].chomp} ( #{u[:code]} )"
end

Kernel.exit 0
