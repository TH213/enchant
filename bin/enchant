#!/usr/bin/env ruby
require 'enchant'
require 'rainbow'
require 'awesome_print'
require 'progressbar'
require 'getoptlong'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--ping', '-P', GetoptLong::NO_ARGUMENT],
  [ '--flood', '-f', GetoptLong::REQUIRED_ARGUMENT],
  [ '--wordlist', '-w', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--host', '-H', GetoptLong::REQUIRED_ARGUMENT],
  [ '--domain', '-d', GetoptLong::REQUIRED_ARGUMENT],
  [ '--port', '-p', GetoptLong::REQUIRED_ARGUMENT]
)

options = { :flood=> -1, :ping=>-1, :wordlist=>'basic.txt', :host=>nil, :port=>80, :domain=>nil }

opts.each do |opt, arg|
  case opt
  when '--help'
    ap "enchant: there is no doc at the moment... sorry."
    exit 0
  when '--version'
    ap "enchant " + Enchant::Version.version[:string]
    exit 0
  when '--flood'
    if arg.to_i <= 0
      ap "enchant: requests number must be positive"
      exit 1
    else
      options[:flood] = arg.to_i
    end
  when '--ping'
    options[:ping] = 0
  when '--host'
    options[:host] = arg
  when '--port'
    options[:port] = arg.to_i
  when '--wordlist'
    options[:wordlist] = arg
  when '--domain'
    options[:domain] = arg
  end
end

if options[:host].nil? && options[:domain].nil?
  if ARGV.length != 1
    ap "enchant: missing url argument (try --help)"
    exit 0
  end

  url = ARGV.shift
  e = Enchant::Engine.new(url)

else
  if options[:domain].nil?
    e = Enchant::Engine.new
    e.host = options[:host]
    e.port = options[:port]
  else
    e = Enchant::Engine.new
    e.domain = options[:domain]
  end
end

if options[:flood] != -1
  if (! e.is_sane?)
    puts 'Automatic url parsing failed, please consider providing such information by hand.'
    exit 1
  end
  puts "Flooding "+e.host+" with #{options[:flood]} requests"

  pbar = ProgressBar.new("reqs", options[:flood])
  start_time = Time.now
  (1..options[:flood]).each do |i|
    pbar.inc
    e.get('/')
  end
  puts
  puts "flooed in " + (Time.now - start_time).to_s + "s"
  exit 0
end

if options[:ping] != -1
  if (! e.is_sane?)
    puts 'Automatic url parsing failed, please consider providing such information by hand.'
    exit 1
  end
  puts "Pinging "+e.host+" onto port " + e.port.to_s

  start_time = Time.now
  e.get("/")
  if e.up?
    puts e.host + " seems to be alive"
  else
    puts e.host + " seems having some trouble ("+e.code+")"
  end
  puts
  puts "pinged in " + (Time.now - start_time).to_s + "s"
  exit 0
end

if !options[:domain].nil?
  if (! e.is_sane?)
    puts 'Automatic url parsing failed, please consider providing such information by hand.'
    exit 1
  end
  puts "scanning for " + e.domain + " for subdomains"
  e.list(wordlist)
  list = e.fuzz

  if list == nil
    puts "Enchant is giving up since no wordlist file is available"
    exit -1
  end
  pbar = ProgressBar.new("subdomains", list.size)
  found=Array.new
  list.each {|x|
    pbar.inc
    if (e.ping?(x.chomp+"."+domain))
      found.add(x+"."+domain)
    end
  }
  puts found.length+" subdomains found."
  exit 0
end

puts "Sending probe to #{url}"
e.list(options[:wordlist])
list = e.fuzz()
if list == nil
  puts "Enchant is giving up since no wordlist file is available"
  exit -1
end

pbar = ProgressBar.new("urls", list.size)

list.each {|x|
  pbar.inc
  code = e.get("/".concat(x).chomp)
  unless code != 404
    case code
      # just hide 404s... when "404" then puts "Status is #{code} for /#{x.chomp}".foreground(:yellow)
    when "200" then puts "Status is #{code} for /#{x.chomp}".foreground(:green)
    when "500" then puts "Status is #{code} for /#{x.chomp}".foreground(:red)
    else 
      puts "Status is #{code} for /#{x.chomp}"
    end
  end
}
pbar.finish
# puts e.server
# 


