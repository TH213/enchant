#!/usr/bin/env ruby
require 'enchant'
require 'rainbow'
require 'getoptlong'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--verbose', '-V', GetoptLong::NO_ARGUMENT ],
  [ '--wordlist', '-w', GetoptLong::REQUIRED_ARGUMENT ]
)

trap("INT") { puts '['+'INTERRUPTED'.color(:red)+']'; exit -1 }

options = { :verbose=>false, :wordlist=>nil, :host=>nil, :port=>80, :domain=>nil }

opts.each do |opt, arg|
  case opt
  when '--help'
    Enchant::Engine.help
    exit 0
  when '--verbose'
    options[:verbose]=true
  when '--version'
    puts "enchant #{Enchant::Version.version}"
    exit 0
  when '--wordlist'
    options[:wordlist] = arg
  end
end

if ARGV.length != 1
  puts "missing target".color(:red)
  Enchant::Engine.help
  exit -1
end

url = ARGV.shift
options[:host]= url.split(':')[0] ||= "localhost"    # fallback here should never occur... however it's better to be paranoid
options[:port] = url.split(':')[1] ||= 80             # more common here


puts "sending probes to #{options[:host]}@#{options[:port]}"

e = Enchant::Engine.new(options)
if ! e.up?
  puts "#{options[:host]}@#{options[:port]} is down or unreachable".color(:red)
  exit 1
end


start=Time.now
count = e.scan
stop=Time.now

puts "#{count} urls open found in #{stop-start} secs".color(:green)

e.urls_open.each do |u|
  puts u

end

exit 0
