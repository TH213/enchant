#!/usr/bin/env ruby
require 'rubygems'
require 'lib/Enchant'
require 'rainbow'
require 'progressbar'
require 'getoptlong'
require 'rdoc/usage'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--version', '-v', GetoptLong::NO_ARGUMENT ],
  [ '--ping', '-P', GetoptLong::NO_ARGUMENT],
  [ '--flood', '-f', GetoptLong::REQUIRED_ARGUMENT],
  [ '--wordlist', '-w', GetoptLong::REQUIRED_ARGUMENT ],
  [ '--host', '-H', GetoptLong::REQUIRED_ARGUMENT], 
  [ '--port', '-p', GetoptLong::REQUIRED_ARGUMENT]
)

flood = -1
ping = -1
wordlist = 'basic.txt'
host = nil
port = nil

opts.each do |opt, arg|
  case opt
        when '--help'
          RDoc::usage
          exit 0
        when '--version'
          puts Enchant.version
          exit 0
        when '--flood'
          flood = arg.to_i
          if flood <= 0
            puts 'can\'t flood negative requests'
            exit 1
          end
        when '--ping'
          ping = 0
        when '--host'
          host = arg
        when '--port'
          port = arg.to_i
        when '--wordlist'
          if arg == ''
            wordlist = 'basic.txt'
          else
            wordlist = arg
          end
      end
end

if host == nil && port == nil
  if ARGV.length != 1
    puts "Missing url argument (try --help)"
    exit 0
  end

  url = ARGV.shift
  e = Enchant.new(url)

else
  e = Enchant.new
  e.host = host
  e.port = port
end

puts e

if flood != -1
  if (! e.is_sane?)
    puts 'Automatic url parsing failed, please consider providing such information by hand.'
    exit 1
  end
  puts "Flooding "+e.host+" with #{flood} requests"
  
  pbar = ProgressBar.new("reqs", flood)
  start_time = Time.now
  (1..flood).each do |i|
    pbar.inc
    e.get('/')
  end
  puts
  puts "flooed in " + (Time.now - start_time).to_s + "s"
  exit 0
end

if ping != -1
  if (! e.is_sane?)
    puts 'Automatic url parsing failed, please consider providing such information by hand.'
    exit 1
  end
  puts "Pinging "+e.host+" onto port " + e.port.to_s
 
  start_time = Time.now
  e.ping
  if e.is_alive?
    puts e.host + " seems to be alive"
  else
    puts e.host + " seems having some trouble ("+e.code+")"
  end
  puts
  puts "pinged in " + (Time.now - start_time).to_s + "s"
  exit 0
end
puts "Sending probe to #{url}"
e.list(wordlist)
list = e.fuzz()
if list == nil
  puts "Enchant is giving up since no wordlist file is available"
  exit -1
end

pbar = ProgressBar.new("urls", list.size)

list.each {|x|
  pbar.inc
 code = e.get("/".concat(x).chomp)
 unless code != 404
   case code
     # just hide 404s... when "404" then puts "Status is #{code} for /#{x.chomp}".foreground(:yellow)
    when "200" then puts "Status is #{code} for /#{x.chomp}".foreground(:green)
    when "500" then puts "Status is #{code} for /#{x.chomp}".foreground(:red)
    else 
      puts "Status is #{code} for /#{x.chomp}"
    end
  end
}
pbar.finish
# puts e.server
# 


